/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package desktop;

import java.util.LinkedList;
import ucunix.Console;

/**
 *
 * @author ucu
 */
public class ConsoleWidget extends javax.swing.JPanel implements Console {

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField inputField;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
   
    
//    private final ResourceId resourceId;
//    private final ProcessId pid;
//    private final Scheduler scheduler;
    
    private LinkedList<String> inputLines = new LinkedList<>();
    
    /**
     * Creates new form ConsoleWidget
     */
    public ConsoleWidget() {
//        this.resourceId = new ResourceId();
//        this.pid = pid;
//        this.scheduler = scheduler;
        
        initComponents();
    }
    
    public void onInputFieldActionPerformed() {
        inputLines.add(inputField.getText());
        inputField.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        inputField = new javax.swing.JTextField();

        scrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        scrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        new SmartScroller(scrollPane, SmartScroller.VERTICAL, SmartScroller.END);

        textArea.setEditable(false);
        textArea.setColumns(41);
        textArea.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        textArea.setRows(23);
        scrollPane.setViewportView(textArea);

        inputField.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        inputField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventInputFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(inputField)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(inputField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void eventInputFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventInputFieldActionPerformed
        onInputFieldActionPerformed();
    }//GEN-LAST:event_eventInputFieldActionPerformed

    @Override
    public void print(String output) {
        textArea.append(output);
    }

    @Override
    public void clear() {
        textArea.setText("");
    }

    @Override
    public String read() {
        if (!inputLines.isEmpty()) {
            return inputLines.poll();
        } else {
            return "";
        }
    }
}
