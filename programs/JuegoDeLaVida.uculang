" " .M { Celda Muerta } 
"#" .V { Celda Viva }

30 .ancho
31 .anchoNl
22 .alto

"                              \n"
"                           #  \n" append
"   ##                    #    \n" append
"   # ##                  ###  \n" append
"   #                          \n" append
"                              \n" append
"                              \n" append
"                              \n" append
"                              \n" append
"                              \n" append
"             #####            \n" append
"             #####            \n" append
"             #####            \n" append
"             #####            \n" append
"             #####            \n" append
"                              \n" append
"                              \n" append
"                              \n" append
"                         ###  \n" append
"                         #    \n" append
"                          #   \n" append
"                              \n" append
.tablero

" " $ancho * "\n" append $alto * .tableroB

:juego-de-la-vida
    console.clear
    $tablero console.print
    200 timer.sleep

    0 ..fila
    ::iterFila
        0 ..columna
        ::iterCol
            $$fila $$columna (vecinosVivos)

            (:actualizar-muerta)
            (:actualizar-viva)
               
            drop
            
            $$columna 1 + ..columna
        $$columna $ancho < @:iterCol
        $$fila 1 + ..fila
    $$fila $alto < @:iterFila
    
    $tableroB $tablero .tableroB .tablero

    @juego-de-la-vida

    ::set-muerta
        $tableroB $$fila $anchoNl * $$columna + $M set
        return 

    ::set-viva
        $tableroB $$fila $anchoNl * $$columna + $V set
        return 

    ::actualizar-viva
        $tablero $$fila $anchoNl * $$columna + at $M = return
        dup 2 < (:set-muerta)
        dup 3 > (:set-muerta)
        dup 2 = (:set-viva)
        dup 3 = (:set-viva)
        return

    ::actualizar-muerta
        $tablero $$fila $anchoNl * $$columna + at $V = return
        dup 3 = (:set-viva)
        dup 3 < (:set-muerta)
        dup 3 > (:set-muerta)
        return


:vecinosVivos
    {
        Entrada:
                * índiceFila
                * índiceColumna

        Salida:
                * númeroDeCeldasVivas
    }

    ..columna
    ..fila

    $$fila 1 - $anchoNl * $$columna 1 - + ..indice

    0 ..conteo
    
    $tablero $$indice (:getOrM) $V = (:incrementar) $$indice 1 + ..indice
    $tablero $$indice (:getOrM) $V = (:incrementar) $$indice 1 + ..indice
    $tablero $$indice (:getOrM) $V = (:incrementar) 

    $$indice $anchoNl + 2 - ..indice

    $tablero $$indice (:getOrM) $V = (:incrementar) $$indice 2 + ..indice
    $tablero $$indice (:getOrM) $V = (:incrementar) 

    $$indice $anchoNl + 2 - ..indice

    $tablero $$indice (:getOrM) $V = (:incrementar) $$indice 1 + ..indice
    $tablero $$indice (:getOrM) $V = (:incrementar) $$indice 1 + ..indice
    $tablero $$indice (:getOrM) $V = (:incrementar) 

    $$conteo return

    ::getOrM
        dup 0 < @:getOrM-retM
        over len over <= @:getOrM-retM
        at return

    ::getOrM-retM
        drop drop
        $M return

    ::incrementar
        $$conteo 1 + ..conteo
        return